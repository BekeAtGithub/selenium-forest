import re  # Import regular expressions for pattern matching

class CodeVulnerabilityScanner:  # Define a class for scanning code vulnerabilities
    def __init__(self):  # Constructor to initialize known vulnerability patterns
        self.vulnerability_patterns = [
            re.compile(r'(?i)eval\s*\('),  # Use of eval (code execution vulnerability)
            re.compile(r'(?i)exec\s*\('),  # Use of exec (arbitrary code execution risk)
            re.compile(r'(?i)subprocess\.popen\s*\('),  # Risk of shell injection via subprocess
            re.compile(r'(?i)pickle\.load\s*\('),  # Risk of deserialization vulnerability
            re.compile(r'(?i)os\.system\s*\(')  # Risk of shell command injection
        ]

    def scan_code(self, code_text):  # Function to scan code for vulnerabilities
        """Scan the provided code and return a list of potential vulnerabilities."""
        found_vulnerabilities = []  # Initialize list to store detected vulnerabilities
        for pattern in self.vulnerability_patterns:  # Iterate over known vulnerability patterns
            matches = pattern.findall(code_text)  # Search for matches in code
            if matches:
                found_vulnerabilities.append(matches[0])  # Add detected vulnerabilities to list
        return found_vulnerabilities  # Return list of detected vulnerabilities
