import openai  # Import OpenAI library for AI-powered analysis
import os  # Import os for environment variable handling

class LLMVulnerabilityAnalyzer:  # Define class for AI vulnerability detection
    def __init__(self):  # Constructor to initialize AI model
        self.api_key = os.getenv("OPENAI_API_KEY")  # Retrieve OpenAI API key from environment variable
        if not self.api_key:
            raise ValueError("OpenAI API key is missing. Set OPENAI_API_KEY environment variable.")

    def analyze_text(self, text):  # Function to analyze provided text for vulnerabilities
        """Send text to OpenAI and return analysis results."""
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4",  # Specify the AI model
                messages=[
                    {"role": "system", "content": "You are a security expert detecting vulnerabilities in code and logs."},
                    {"role": "user", "content": text}
                ]
            )
            return response["choices"][0]["message"]["content"]  # Extract and return AI-generated response
        except Exception as e:
            return f"Error analyzing text: {str(e)}"
