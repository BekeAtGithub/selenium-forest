from azure_api_client import AzureAPIClient  # Import Azure API client
from scanner_secret_exposure import SecretExposureScanner  # Import secret scanner
from scanner_log_sensitivity import LogSensitivityScanner  # Import log sensitivity scanner
from scanner_code_vulnerability import CodeVulnerabilityScanner  # Import code vulnerability scanner

# Initialize Azure DevOps API client
client = AzureAPIClient("your-org", "your-project")  # Replace with actual org and project

# Initialize scanners
secret_scanner = SecretExposureScanner()  # Instantiate secret scanner
log_scanner = LogSensitivityScanner()  # Instantiate log scanner
code_scanner = CodeVulnerabilityScanner()  # Instantiate code scanner

def run_vulnerability_scan():  # Function to execute vulnerability scanning
    """Run vulnerability scans on Azure DevOps pipelines, logs, and code."""
    print("Starting vulnerability scan...")  # Indicate scan start
    
    # Fetch pipeline configurations
    pipelines = client.make_request("pipelines")  # Fetch pipeline details
    for pipeline in pipelines.get("value", []):  # Iterate through pipeline data
        pipeline_content = str(pipeline)  # Convert pipeline data to string
        found_secrets = secret_scanner.scan_text(pipeline_content)  # Scan for secrets
        if found_secrets:
            print(f"Exposed secrets found in pipeline {pipeline['id']}: {found_secrets}")  # Print detected secrets
    
    # Fetch build logs
    builds = client.make_request("build/builds")  # Fetch build logs
    for build in builds.get("value", []):  # Iterate through build data
        log_content = str(build)  # Convert build data to string
        found_sensitive_logs = log_scanner.scan_logs(log_content)  # Scan logs
        if found_sensitive_logs:
            print(f"Sensitive data found in build {build['id']}: {found_sensitive_logs}")  # Print detected data
    
    # Fetch repositories and scan for vulnerabilities
    repos = client.make_request("git/repositories")  # Fetch repositories
    for repo in repos.get("value", []):  # Iterate through repository data
        repo_content = str(repo)  # Convert repo data to string
        found_vulnerabilities = code_scanner.scan_code(repo_content)  # Scan for vulnerabilities
        if found_vulnerabilities:
            print(f"Code vulnerabilities found in repo {repo['id']}: {found_vulnerabilities}")  # Print detected issues
    
    print("Vulnerability scan completed.")  # Indicate scan completion

if __name__ == "__main__":  # Main entry point for script execution
    run_vulnerability_scan()  # Execute scan
